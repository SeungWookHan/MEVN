// 함수형 플그래밍이란 작은 순수함수들로 로직을 구현하고, 고차함수를 활용해 재사용성을 높이는 프로그램 패러다임

// 순수함수: 동일한 입력 -> 동일한 출력, 참조 투명성

const b = 1;
const pure = (a, b) => {
  return a + b;
};
const not_pure = (a) => {
  return a + b;
};

console.log(pure(1, 3)); // 4
console.log(not_pure(1)); // 2
// not_pure는 외부 값인 b의 의존적이기에 순수함수가 아님. 들어오는 매개변수값만을 이용해 결과 도출해내는 것이 순수함수
// 장점: 순수함수로 구성된 경우 메모리 공유에 문제가 없음

// 전역변수를 참조할 때의 순수함수
let c = 0;
// 안좋은 예: 전역변수를 그대로 변환 후 반환
const bad_f = () => {
  return c++;
};
bad_f();
console.log(c); // 1
// 좋은 예: 전역변수를 매개변수로 받음
const f = (c) => c + 1;

/*
주의할 점
1. 최대한 지역변수만을 사용하기
2. 인수로 넘기는 값의 본체까지 수정X
3. 매개변수로 넘기는 값이 객체라면 원본 객체 변이를 일으키지 않기(깊은 복사 하기)
*/
